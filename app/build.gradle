//noinspection GradleCompatible
apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {

    // What is this ?
//    signingConfigs {
//    }

    compileSdkVersion 25
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "org.give2peer.karma"

        // Yes, we are supporting API 10. It is the root of most of our trouble and bad code.
        // We'll dump support for it eventually, say when it drops below 0.01% of all users.
        minSdkVersion 10
        targetSdkVersion 25

        versionCode 10
        versionName "1.5.0"

        // You can also enable it per-file in the test runner configuration of android studio.
        //testInstrumentationRunner "cucumber.api.android.CucumberInstrumentation"
        // You might also need that one for some androidTests without Gherkin features
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // Because we're using Apache legacy, removed from SDK 23
    // We'll remove usage of this when we've updated to the new RestClient
    useLibrary 'org.apache.http.legacy'

    // What is this ?
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }

    // This solves (stale?) httpclient packaged with Android creating conflicts
    // I still have a warning that one of the two is ignored, and jarjar blinks:
    // WARNING: Dependency org.apache.httpcomponents:httpclient:4.3 is ignored for debug
    //          as it may be conflicting with the internal version provided by Android.
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'LICENSE.txt'
    }
}

// Android Annotations needs this
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://jitpack.io" } // to get from github (for sugardb, introduction & location)
}

dependencies {
    // We actually shouldn't have any of those, it feels like bad practice
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // BACKWARDS COMPATIBILITY (http://developer.android.com/tools/support-library/features.html)
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.github.machinarius:preferencefragment:0.1.1' // we'll probably remove this

    // ANDROID ANNOTATIONS (unsure why we have both apt and compile directives)
    compile 'org.androidannotations:androidannotations-api:4.1.0'
    apt     'org.androidannotations:androidannotations:4.1.0'
    compile 'org.androidannotations:rest-spring-api:4.1.0'
    apt     'org.androidannotations:rest-spring:4.1.0'

    // This is for GsonHttpMessageConverter for AA's RestService, so far as I understand
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'

    // If we update those, we need to also update Google Play Services in the emulator (no joy)
    // GOOGLE - MAPS API
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    // GOOGLE - LOCATION API
    compile 'com.google.android.gms:play-services-location:8.4.0'

    // LOCATION
    // We use our own fork because the original lib supports API >= 14
    compile 'com.github.Give2Peer:LocationManager:1.1.1-api10'

    // MATERIAL DESIGN
    compile 'com.android.support:design:25.0.1'

    // FAB (Floating Action Button)
    compile 'com.shamanland:fab:0.0.8'

    // NAVIGATION DRAWER
    compile('com.mikepenz:materialdrawer:5.3.0@aar') { transitive = true }

    // HTTP /!\ deprecated, remove them once we've refactored to the new RestClient
    compile 'org.apache.httpcomponents:httpmime:4.3'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'

    // EVENT BUS (because UI flows are complicated enough)
    compile 'org.greenrobot:eventbus:3.0.0'

    // ORM (abstraction layer for our sqlite database)
    // compile 'com.github.satyan:sugar:1.5'
    // ... but 1.5 is buggy with gradle 2.x, so we need the master branch with jitpack.io
    compile 'com.github.satyan:sugar:master-SNAPSHOT'

    // SWEET SUGAR FOR HUMAN TIMES ("2 days ago")
    compile 'org.ocpsoft.prettytime:prettytime:3.2.7.Final'
    // JODA TIME (parse Dates from JSON)
    compile 'net.danlew:android.joda:2.8.1'

    // GSON (JSON conversion made somewhat easy)
    compile 'com.google.code.gson:gson:2.4'

    // IMAGE CACHE (provides WebImageView, pretty awesome)
    compile 'pl.polidea:android-image-cache-library:2.0'  // buggy !? So we use the one below.
    compile 'com.github.rooseve:WebImageView:master-SNAPSHOT'

    // STRING UTILS (Capitalize, etc.)
    compile 'org.apache.commons:commons-lang3:3.4'

    // ONBOARDING TUTORIALS
    // That one works great but requires jitpack.io ; maybe in the future it won't ?
    compile ('com.github.rubengees:introduction:1.3.1@aar') { transitive = true; } // jitpack.io
    // Below are onboarding libs that looked good but failed under API 10
    // compile 'io.github.meness:easyintro:1.2.9'              // Not found
    // compile 'com.heinrichreimersoftware:material-intro:1.4' // API 15, jitpack.io
    // compile 'com.github.jrejaud:Onboarder:v1.02'            // API 15
    // compile 'com.github.chyrta:AndroidOnboarder:0.6'        // API 14
    // compile 'za.co.riggaroo:materialhelptutorial:1.1.0'     // API 15

    // FONT ICONS (clever, in case images become not enough)
    // http://zavoloklom.github.io/material-design-iconic-font/icons.html
    //compile 'com.malinskiy:materialicons:1.0.1'

    // RETROFIT : use this if we can
    //compile 'com.squareup.retrofit:retrofit:1.6.0'

    ////////////////////////////////////////////////////////////////////////////////////////////////

    // FEATURES-TESTING
    androidTestCompile 'info.cukes:cucumber-core:1.2.2'
    androidTestCompile 'info.cukes:cucumber-java:1.2.2'
    androidTestCompile 'info.cukes:cucumber-android:1.2.2@jar'
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.2.1'

    // SOME OTHER TEST LIBS we don't need right now (but might later on)
    //androidTestCompile 'info.cukes:cucumber-junit:1.2.2'
    //androidTestCompile 'info.cukes:gherkin:2.12.2'

    // UNIT-TESTING
    // We're actually not using mockito yet
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'junit:junit:4.12' // ahem. o.O

    androidTestCompile 'com.android.support:support-annotations:25.0.1'
    androidTestCompile 'com.android.support.test:runner:0.5'

    // Not sure why we'd use testng over junit4 ?
    //testCompile 'org.testng:testng:6.9.6'

    // TRUTH looks nice, but we have enough assertions for our uses
    //androidTestCompile 'com.google.truth:truth:0.26'
}

// APT configuration is mostly for Android Annotations
apt {
    arguments {
        resourcePackageName android.defaultConfig.applicationId
        androidManifestFile variant.outputs[0]?.processResources?.manifestFile

        // if you have multiple outputs (when using splits), you may want to have other index than 0

        // you should set your package name here if you are using different application IDs
        // resourcePackageName "your.package.name"

        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}
